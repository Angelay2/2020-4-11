死锁的4个必要条件:
    互斥条件: 每一把互斥锁只能被一个执行流所占用(不能破坏)
    请求与保持条件: 吃着碗里的,看着锅里的 ---> 当前执行流已经占有一个互斥锁, 还想要去申请新的互斥锁(可以破坏 改变)
    循环等待条件: 若干个执行流形成锁资源的情况,形成了一个闭环(可以破坏)
    不可剥夺条件: 只有占有互斥锁的线程可以释放互斥锁, 其他线程不能强行释放已经被其他线程占用的互斥锁(不能破坏 无法改变的)
避免死锁的方法:
    1. 破坏必要条件(破坏互斥和循环等待条件)
    2. 加锁顺序一致 两个都按照相同的加锁顺序
        线程A  先加互斥锁1, 再加互斥锁2   如果互斥锁A都没加上 互斥锁2加不了
        线程B  先加互斥锁1, 再加互斥锁2,
    3. 避免锁不能被释放(在使用完互斥锁后一定要记得释放互斥锁, 在任何可能退出的地方设置释放互斥锁的接口)
    4. 一次性分配资源, 不要一次给不完
        线程A想要2苹果, 若只分配一个 把另一个分配给了线程B ,导致两线程都在阻塞等待
        线程A想要2苹果

条件变量 --> 同步: 保证程序对临界资源访问的合理性
    药店的口罩来源于工厂, 药店只有一个口罩了,但来了三个人买, 同步就相当于没买到口罩的人给药店老板留电话, 等工厂的口罩到药店后,药店通知买家, 这就是同步. 存在一个问题: 在有一个口罩的情况下, 给两人打了电话, 且同时到了药店,打架(互斥可解决问题, 保证对临界资源的访问的原子性).
    本质: PCB等待队列 + 两个接口(等待接口+唤醒接口) ---> 是一结构体(互斥锁也是一结构体), 
    功能: 当有资源的时候, 可以让执行流直接访问资源; 在没有资源的情况下, 让执行流调用条件变量的接口,进行等待, 等待的执行流的PCB被放到PCB等待队列中去, 
    假设现在有一个临界资源(有两值, val = 1/0, ), 有两执行流想访问临界资源, 访问未果, 被放到PCB等待队列, 是因为调了条件变量的等待接口, 等线程A访问完后需要调用条件变量的唤醒接口去通知线程B, ( 执行流A负责吃面, 执行流B负责做面 ,没面时A去等待,有面时B等待, A吃完面唤醒B, B做完面唤醒A),
    PCB本身是一结构体, 

条件变量接口:
    1. 定义条件变量:
        pthread_cond_t: 条件变量类型
    2. 初始化条件变量
        int phread_cond_init(pthread_cond_t* cond, pthread_condattr_t* attr) --- > 动态初始化 (互斥锁就是一静态初始化)
            cond: 传入条件变量的地址就可以了
            attr: 传入NULL采用默认属性就可以了
        静态初始化
            pthread_cond_t cond = PTHREAD_COND_INITIALIZER
    3. 等待接口(将调用该等待接口的执行流的PCB放到等待队列中去, 进行等待)
        int pthread_cond_wait(pthread_cond_t* cond, pthread_mutex_t* mutex)
            cond: 传入条件变量的地址就可以了
            mutex: 传入互斥锁变量的地址
            1. 内部实现原理
            2. 为什么需要互斥锁?()

    pthread_cond_wait内部实现原理
    等待步骤, 阻塞在pthread_cond_wait内部的实现, (在访问临界资源之前进行加锁操作,发现现在访问不了, 进入等待队列,并且拿走了互斥锁 没有释放, 导致别人访问不了临界资源, 所以需要在等待时解锁, 这个互斥锁是接口内部自己释放的,)
        1. 将调用者的PCB(该执行流)放到PCB等待队列当中去,
        2. 释放互斥锁
        3. 等待被唤醒
    面试题: 能不能先释放互斥锁,再将PCB放到PCB等待队列中去???????????????????????????????????????
        时间差可能导致收不到消息, 刚一解锁,别的执行流就可以拿到锁去访问资源了, 当访问完资源通知PCB等待队列中的执行流时,可能此时里面并没有执行流, 释放锁的那个由于时间差可能还没进来等待队列中,所以就接收不到消息, 进行等待. 永远不会被唤醒
    当唤醒之后 pthread_cond_wait 就返回, 
    唤醒之后的逻辑:(也是pthread_cond_wait内部实现原理)
        1. 从PCB等待队列移除出来(出队操作)
        2. 竞争互斥锁                              竞争的前提是先移除出来, 和所有的执行流一起抢互斥锁 不一定能抢到,他就继续抢锁,此时他还没让出CPU, 当时间片到时,他被迫让出CPU,他的上下文信息(寄存器当中的值)以及程序计数器(保存程序要执行的下一条指令-->加互斥锁的指令), 当下一片时间片又到时, 首要任务是加互斥锁,要是时间片结束了,还没抢到,继续让出CPU, 等第二片时间片又来时, 继续抢.....直到抢到互斥锁后, 才会返回wait接口, 进入正常执行, 执行我们程序员自己的其他程序
并发执行,  当没有抢到锁时 陷入阻塞, 等待别人释放, 确定的是只有一个执行流能抢到互斥锁, 
解决由于等待所产生的问题(会出现卡死, )时, 可以创建两个条件变量, 互相唤醒对方的等待队列中的执行流

4. 唤醒接口: 通知PCB等待队列当中的执行流来访问临界资源
        int pthread_cond_signal(pthread_cond_t* cond) --> 唤醒至少一个PCB等待队列中的执行流
        int pthread_cond_broadcast(pthread_cond_t* cond) --> 唤醒PCB等待队列当中所有的执行流
    5. 销毁接口
        int pthread_cond_destory(pthread_cond_t* cond)
    
时间片是分配给每一个PCB的, 分配时间片是内核的逻辑, 可能两个执行流各自在自己的时间片在CPU并发运行, 看谁抢资源加锁快
程序要执行必须在CPU上, 没有在时间片时 他是挂起来的状态, 
