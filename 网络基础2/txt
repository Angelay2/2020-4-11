应用层：
    自定制协议
        1. 应用层程序员自己定制的协议，和网络协议栈当中的协议不干扰；处于应用层
        2. tcp粘包问题
    如何解决粘包问题？？？
        粘包问题根源在于： 数据在缓冲区当中没有明显的数据边界
         边界
            1+1边界1+1边界    ----》 只要碰到边界， 就可以表示上一条数据接收完毕了
            通常情况下，工业上采用\r(0D)\n(0A)来进行区分
            对于应用层程序而言，在接收数据时不能区分是否接收完了，所以需要在应用层进行缓存，再次接收，将下一次接收的数据和刚才缓存的数据拼接起来，
        应用层数据报头（结构体或者数据结构）+应用层数据+数据边界
            定义数据长度， 数据种类， 属性
            size=3 1+1 0D0A（在对端的应用层进行解读，如果没到尾，则证明有问题，先不处理）
        小结：
            1. 定长数据包+数据（有效载荷）+分隔符
            2. 定长的数据包里可以获取数据的长度，数据种类，属性等
            3. 分隔符起到了定义边界的问题

    序列化：将对象转化为字节序列的过程
        struct data(int a, int b); data d; d.a=10;d.b=20;
        send(socket,d,sizeof(d),0);  将对象转化为二进制
    反序列化：将字节序列转化为对象的过程（相当于在recv)
        struct data dd; 
        recv(sockfd,&dd,sizeof(dd),0);

    http协议: 超文本传输协议
        1. https：发给百度服务器的数据，他会进行加密操作，别人抓取到数据包也不能解析
        2. URL的组成
            http://user:passwd@www.baidu.com:80/dir/index/htm?id=1&wd=C%2B%2B#ch1
                http:// 协议方案名
                user:passwd: 用户名和密码
                www.baidu.com: 域名， 最终会解析成为服务端IP
                80: 端口
                /dir/index/htm: 带层次的文件路径, 表示浏览器要请求的资源路径(里包括了百度页面所有的内容); 
                    '/'并非是linux操作系统的根目录,而是逻辑上的根目录,web服务器定义的根目录
                ?id=1&wd=C%2B%2B: 查询字符串, 格式为key=value&key=value      (wd=C%2B%2B ---> C++)
                    由于value中可能具有普遍标识的字符,这些字符可能会导致歧义,所以在查询字符串的时候 需要进行URLEcode(UR编码),然后在服务端进行URL解码;
                    UR编码: 就是将特殊的字符按照16进制传输, 例如+变成2B(+的ASCII码是43), 为了标识这个字符是经过URL编码的, 才在编码完成的字符之前加上一个%, 来表示后面的字符是进行UR编码的
                    UR解码: 将16进制的字符,再解析成正常的字符
                #ch1: 片段标识符, 表示当前页面被浏览器加载之后定位到什么位置
        3.http协议格式:
            请求: 
                请求首行 \r\n
                    请求方法 URL 协议版本
                        请求方法:
                            1. GET: 从服务器获取一个资源的方法
                                GET并不是只能向服务器获取资源,也可以在查询字符串当中提交数据到服务器
                                提交的数据在URL当中,URL的长度针对不同的浏览器是有限制的
                            2. POST: 想服务器去提交数据的方法,提交的数据在正文当中
                        小结: POST方法比GET方法更加私密
                            安全的做法是,使用https,加上加密,将传输的数据进行加密
                        协议版本:
                            http协议的版本, 目前有4种
                            HTTP 0.9
                            HTTP 1.0
                            HTTP 1.1(现在常用)
                            HTTP 2
http和dns协议是在应用层的,tcp是在传输层

                请求头部 key:value\r\nkey:value\r\n
                    Content-Length: 正文长度
                    Content-Type: 正文的编码格式
                        text/plain: 纯文本格式
                        text/html: HTML格式
                        text/png: png图片格式
                        appalication/json: json数据格式
                        application/msword: word文档格式
                    refer: 当前页面从哪一个页面跳转过来的
                    Cookie: 向服务器提交浏览器本地保存的认证信息,认证信息是之前登陆服务器的时候,服务器返回给浏览器的,浏览器进行缓存,在下一次请求的时候,带上Cookie. 知道这个界面是哪一个浏览器在访问,否则不让你访问
                    Tranfer-Encoding: 针对正文而言,可以支持分块传输;
                    User-Agent: 操作系统和浏览器的版本信息
                    Location: 搭配重定向使用, 如果你访问我 我就给你重定向到别的界面
                    Connection:keep-alive: 保存长连接
                        之前http在使用tcp的时候,是按照短连接来使用的,早期http是一个无状态的协议; http也支持长连接

                空行 \r\n
                正文: 提交给服务器/返还给服务器的数据

            响应:
                响应首行 \r\n
                    协议版本 状态码 状态码解释 (HTTP/1.1 200 OK)
                        1XX: 接收到请求了,正在处理
                        2XX: 请求处理完毕了; 200, OK
                        3XX: 重定向的状态, 表示浏览器需要进行附加操作.才能完成钢管的请求操作;302 临时重定向,搭配Location一起使用
                        4XX: 服务器无法处理这个请求; 404 页面不存在 Page Not Found
                        5XX: 服务处理出错; 502 Bad Gateway(坏的网关), 服务器内部出错

                响应头部 key:value\r\nkey:value\r\n
                    Content-Type: 正文编码类型
                    Content-Length: 正文长度
                空行 \r\n
                正文

    总结: 
        1. HTTP协议是应用层的协议, 在传输层使用的是tcp协议, 在网络层使用的是IP协议
        2. HTTP是无状态的协议,不会记录刚刚访问的界面的,早期在使用tcp的时候,是按照短连接来使用,现在也支持了长连接
        3. HTTP是没有加密版本的HTTP协议, 加密版本可以使用HTTPS, (ssl/tsl 这是非对称加密, 有密钥的)
        4. HTTP协议使用的是80端口,HTTPS使用的是443端口(侦听的端口是不一样的)



网络抓包(数据包):
    linux-> tcpdump
        1. 切换到root, 使用tcpdump抓包命令,不仅仅只能抓tcp,udp...网络数据都可以抓
        2. 万能公式: tcpdump -i any port[port] -s 0 -w 123.dat  
    win->txpdump
        两种使用方式
        1. 直接使用wireshark进行抓包,  http底层使用的是tcp协议
            可以过滤 ip.addr == [ip] && tcp.port == [port]
总结:        
    HTTP协议是无状态的协议，有长连接和短连接的用法
    cookie是在header中传输
    HTTP是无状态的

请求方式:
http1.0，三种：post，get，head
http1.1，八种：post，get，head，options，put，delete，trace，connect

POST请求不会被缓存，POST请求不会保留在浏览器历史记录当中，POST请求不能被保存为书签，POST请求对数据长度没有要求
PUT方法请求服务器去把请求里的实体存储在请求URI（Request-URI）标识下。
如果请求URI（Request-URI）指定的的资源已经在源服务器上存在，那么此请求里的实体应该被当作是源服务器关于此URI所指定资源实体的最新修改版本。如果请求URI（Request-URI）指定的资源不存在，并且此URI被用户代理定义为一个新资源，那么源服务器就应该根据请求里的实体创建一个此URI所标识下的资源。如果一个新的资源被创建了，源服务器必须能向用户代理（user agent） 发送201（已创建）响应。如果已存在的资源被改变了，那么源服务器应该发送200（Ok）或者204（无内容）响应

301 永久重定向
302 要求客户端临时重定向
303 临时重定向，对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向
307 临时重定向，在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI

请求字段：
协议头字段名
Cookie 说明： 之前由服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie
Referer 说明： 表示浏览器所访问的前一个页面，正是那个页面上的某个链接将浏览器带到了当前所请求的这个页面。

响应字段：
协议头字段名
ETag 说明：对于某个资源的某个特定版本的一个标识符，通常是一个 消息散列
Location 说明：用来 进行重定向，或者在创建了某个新资源时使用。


不论是请求还是响应报文，都是存在Header的
A.User-Agent: 声明用户的操作系统和浏览器版本信息
B.Content-Type: 数据类型
C.Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上
D.location: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问

在响应报文头部设置字符编码是在Content-Type中设置charset属性，大小写不敏感

domain:可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。
path:Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”。
httponly:如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性,但不是绝对防止了攻击
secure:该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。
expires:指定了coolie的生存期，默认情况下coolie是暂时存在的，他们存储的值只在浏览器会话期间存在，当用户推出浏览器后这些值也会丢失，如果想让cookie存在一段时间，就要为expires属性设置为未来的一个过期日期。现在已经被max-age属性所取代，max-age用秒来设置cookie的生存期

cookie的可以记录用户的ID，记录用户的密码，记录用户浏览过的商品记录。但是无法记录用户的浏览器设置

cookie安全机制，cookie有哪些设置可以提高安全性？
1对保存到cookie里面的敏感信息加密
2.设置HttpOnly为true
3.设置Secure为true
4.给Cookie设置有效期
5.给Cookies加个时间戳和IP戳，实际就是让Cookies在同个IP下多少时间内失效

cookie保存在客户端的机器当中，认为的可以进行篡改
session保存在数据库中，就算sessionid被获取利用但是session中的数据并不会被恶意程序获取，这一点相对cookie来说就安全了一些
cookie保存在客户端浏览器中，而session保存在服务器上
cookie和session都是用来保存状态信息，都是保存客户端状态的机制，它们都是为了解决HTTP无状态的问题而所做的努力
如果浏览器禁用了cookie，session机制不会失效

Session可以存放各种类别的数据，相比只能存储字符串的cookie，能给开发人员存储数据提供很大的便利
session的有效期默认是30分钟
SessionID可以存储每个用户Session的代号，是一个不重复的长整型数字
session默认有效期是30分钟，Cookie没有设置expires属性，那么 cookie 的生命周期只是在当前的会话中，关闭浏览器意味着这次会话的结束，此时 cookie随之失效
