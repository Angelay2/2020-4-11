TCP 协议字段的后半部分
    4位首部长度：0000~1111（0~15）， 而TCP协议头部真正固定的长度占20个字节（源端口，目的端口、确认序号...) 其他的占用40字节
    意味着二进制得到的数值并不是首部长度的字节数量，而是一个数值
    首部长度字节数量 = 首部长度4位比特位计算出来的数值 * 4（单位：字节）
    1111 -》15 -》 15*4=60
    6位保留位： 
    6位标志位： 说明这个数据是直接传输给对端的(军人买票)
        URG：紧急标志位，一般应用在待外数据中，
        send(sockfd,buf,size,MSG_OOB),  看后面的标志位
        问题:对端如何接受这个紧急标志位 -->  (信号(SIGURG)+自定义信号处理函数)
        ACK标志位: 表示确认数据
        PSH标志位: 表示发送数据
        RST标志位: 重置连接
        SYN标志位: 发送链接
        FIN标志位: 断开连接
    16位窗口大小: 占用两个字节, 窗口的表示范围: 0~2^16 单位字节  (2个字节)
    16位校验和: 校验数据是否完整
    16位紧急指针: 和我们的URG标志位配套使用, 如果URG标志位置为1(有效),紧急指针指向的数据就有效(会去读),否则就无效(不会去读)
    选项:
        剩余40字节,可以传输一些不是必要的东西, 前面20个都固定协议字段(是必要的)
        MSS: 最大报文段长度

TCP可靠传输:
    1. 确认应答机制
        1.1 对于连接的发送方(客户端/服务端都可是发送方),发送报文的时候需要带上序号, 当接收方接收到这样的报文的时候,需要对报文进行确认,
        1.2 确认的具体的做法: 是给消息的发送方回复一个确认序号, 而确认序号的含义是告诉消息的发送方"已经接收到数据了,期望发送方发送的下一个序号"
    2. 超时重传机制
        当消息的发送发在发送一条消息后,就会开启一个重传计数器,用来计算消息发送出去的时间, 当消息发送出去的时间超过RTO的时候, 就会重传给报文,(在消息发送出去之后, 发送方数据丢了/发送方的ACK丢了 这两种情况)
        RTO: 超时重传时间, 动态计算出来的
        RTO = 2 * RTT (RTT会变)
        RTT: 报文往返时间 ( 从报文发出去的一刻开始计算, 直到收到确认应答结束, 所经历的时间 )
        预测下一个RTT(报文往返时间) = RTT(cur) * i + RTT(prev) * (1-i);      i一般情况下取值为0.9
    3. 滑动窗口机制
        1. 窗口: 已经被发送方发到网络上, 但是还没有完成确认的分组的集合 (允许发送方在发送数据后暂时不需要对方(网络)的确认应答,继续发送新的数据, 没被确认之前的发送的这些数据的集合就是窗口)
        窗口大小是有限制的, 
            1.第一个限制因素: TCP协议字段当中的窗口大小, 理论上占2^16
            2.第二个限制因素: 接收方回复应答的时候, 在应答当中的窗口大小, 代表了应答方的接收能力( 接收缓冲区---接收窗口大小 )
        注意: 滑动窗口是为了提高双方发送数据的效率的,并不是发送方不需要应答确认,
        分组: 
            1. TCP在发送数据的时候,都会有一个起始序号,
            2. 分组: TCP数据流序号的集合, 窗口大小也有可能是按照分组的数量来讨论的,一般情况下, 三次握手完成的刚刚建立的窗口的大小为15, TCP连接初始值为8个分组(允许你先发送8个分组,暂时不需要确认应答),窗口的大小是根据网络的数据进行变化调整,
            当分组的大小
        注意: 滑动窗口向后滑动一定是收到最早的分组的确认应答之后, 才可以向后滑动
    4. 拥塞控制机制
        慢启动,拥塞避免,快重传,快恢复
        1. 慢启动: 核心思想是当连接建立之后, 先发送的时候,发送少量的数据探测网络的拥塞程度, 当网络情况比较好的时候,逐渐增大数据的发送量. 而不是第一次直接发送很多的数据;
        拥塞窗口: 字节数量的集合, 从一开始从小变大, (比如现在有10000字节数据, 先试着发10个字节试探网络情况 然后逐步增大发送量)
        慢开始门限: 用来约束拥塞窗口的大小, 是一个阈值, 一般是ssthresh 
            拥塞窗口大小 > 慢开始门限 : 执行的是拥塞避免算法
            拥塞窗口大小 < 慢开始门限: 执行的是慢开始算法
            拥塞窗口大小 = 慢开始门限: 执行任意一个算法都可以
                慢开始算法: 随着传输轮次的增加, 拥塞窗口的大小呈现指数增长
                拥塞避免算法: 随着传输轮次的增加, 拥塞窗口的大小呈现线性增长, 每次增加1  直到遇到网络拥塞
            拥塞窗口是指: 发送方不单单要考虑滑动窗口中的发送窗口, 还需要考虑拥塞窗口
            1. 一般情况下, 拥塞窗口的大小会逐渐增大, 直到和发送窗口一致, 就不再向上增长.
        发送窗口和拥塞窗口共同决定发送分组的数量
            2. 当拥塞窗口小于发送窗口, 按照拥塞窗口的大小来发送
            拥塞避免: 
                当拥塞窗口大小, 已经大于等于慢开始门限时, 执行拥塞避免算法, 
                线性增长时为了探测交通拥塞情况, 当发现路由器不能再转发数据时,就说明发生了拥塞,会导致丢包,进而导致重传包, 恶性循环
        快重传: 当发送发收到3个相同的之间发送的序号时, 就知道要重传, 那个数据丢失了
        快恢复: 
            1. 更新慢开始门限 = 拥塞时拥塞窗口大小的一半
            2. 更新拥塞窗口的大小为新的慢开始门限
            3. 执行拥塞避免算法
    5. 捎带应答机制
        TCP是可靠传输,需要进行确认应答 
        本来发PSH 回复ACK; 现在捎带回复PSH 就为PSH+ACK
    6. 延时应答机制
        Win = 0称之为0号窗口, 表示接收方接收能力为0, 这会不管网络是否拥塞, 发送方在接收到Win = 0后,都不会再向接收方发送数据了
        延时应答: (用时间换空间)
            1. 当接收方接收到数据之后, 等到200ms, 等待应用程序将接收缓冲区当中的数据读走, 从而扩大接收缓冲区, 在回复应答的时候m,接收能力就变大
            2. 发送方获取到较大的窗口值的时候, 就可以发送更多的数据给接收方
            3. 延时应答不是不应答, 而是不立即应答,等待一段时间再应答

tcp建立连接用到套接字描述符, 
    保活机制: 
        用来判断连接是否正常, 客户端突然崩溃,没有执行4次挥手, 导致服务端并不知道该客户端异常, 还维护着针对该客户端的套接字描述符,造成服务器文件描述符资源泄漏, 
        1. 当发现连接上两个小时,没有数据收发时, 则会发起我们的保活探测包,
        2. 每隔75秒发送一次, 发送10次, 当10次都没有收到应答时, 就认为该连接异常, 
        3. 就会释放维护该连接的套接字描述符
        客户端也有可能是客户端给服务端发送保活机制, 双方都可能崩溃
        两个小时的等待, 是保活计时器在计时; 当收到一个数据后, 该保活计时器就会重置一次


