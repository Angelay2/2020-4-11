进程程序替换:
    原理:通过进程PCB当中的内存指针 找到进程虚拟地址空间当中的数据段和代码段, 通过页表映射将数据段和代码段映射为新的程序在物理内存当中保存的数据和代码
    exec函数簇:
        int execl(const char* path, const char* arg, ...) l(list)可变参数列表
            path: 带路径的可执行程序
            arg: 给可执行程序传递参数, 传递的第一个参数必须是可执行程序的名称
            ...: 可变参数列表, 必须以NULL指针结尾.
        int execlp(const char* filename, const char* arg, ...) 
            filename: 可执行程序的名称(如果单单只传递命名称, 就需要在PATH环境变量当中配置可执行程序的路径, 同时也支持传递带有绝对路径(pwd)的可执行程序)
            arg: 给可执行程序传递参数, 传递的第一个参数必须是可执行程序的名称
            ...: 可变参数列表, 必须以NULL指针结尾.
        小结: 带有p的exec函数, 则会搜素环境变量, 不带p,则不会搜素环境变量
        int execle(const char* path, const char* arg, ..., char* const envp[])
            envp: 操作系统不会为我们替换成功的进程组织环境变量了, 而是由程序员自己指定环境变量; 指定的环境变量放到envp这个指针数组中, 需要注意的点是:必须以NULL指针结尾
        小结: 带有e的exec函数, 组要程序员自己指定环境变量, 如果不指定, 则替换成功的进程当中没有环境变量
        int execv(const char* path, char* const argv[])
            argv: 给替换的程序传递的命令行参数, 如果不传, 则替换成功的进程中没有命令行参数, 如果传参, 则必须以NULL指针结尾
        小结:exec函数当中l和v的区别:
            l: 以可变参数列表方式传递命令行参数
            v: 以指针数组的方式传递我们的命令行参数
        int execvp(const char* file, char* const argv[]);
        int execve(const char* file, char* const argv[], char* const envp[])
            该函数是一个系统调用, 其他的exec函数最终都是调用该函数的
        总结:execl, execlp, execle, execv, execvp统统都是库函数, 最终都调用execve

进程程序替换的使用场景: 
    1. 守护进程 (服务24小时不间断运行)
        基本具备的条件: server可执行程序, 守护进程的程序,
        认知: 守护进程是由守护程序启动的, 在守护进程这个程序当中使用到了进程程序替换 + 创建子进程 + 进程间通信(判断子进程是否运行正常)
        守护进程程序: 
            每隔一段时间获取子进程状态(时间),
            守护Inc去获取状态, 若server可执行程序时间在修改 则证明server正常, 
            若发现server可执行程序并没有发生更改, 则认为server可执行程序状态异常; 
            执行策略: 重新创建子进程, 让子进程程序替换, 替换为心的server可执行程序
        server可执行程序:
            通过进程间通信方式, 每隔一段时间告诉父进程当前的状态, 
    但守护程序只是一个治标不治本的方法, 因为如果server可执行程序当中, 代码写的比较烂, 时不时的就崩溃, 手进程并不能根治server程序崩溃的问题(这个问题需要程序员更改代码了)
    分布式部署:
    2. shell终端
        2.1 启动bash可执行程序
        2.2 当用户输入命令(可执行程序)的时候, 创建一个子进程, 子进程程序替换;
        2.3 在子进程程序替换的时候, 如果是前台进程, 则bash负责进程等待, 不能接受命令 
   
   测试: minishell
        1. 从标准输入当中读取数据(要执行的可执行程序)  fgets()
        2. 拆分可执行程序名称和命令行参数(原则: 我们认为从标准输入当中读取到的内容第一个空格之前的数据是可执行程序的名称) 第一个空格之后的都认为是命令行参数
        3. 创建子进程 子进程程序替换可执行程序
        4. 在子进程程序替换的时间内, 让父进程等待
    isspace函数
        判断一个字符是否有空白字符(空格, 换页符, 换行, 回车, 水平制表符, 垂直制表符)
        返回值: 返回非0为读到了空白字符, 返回0 则为没有读到
    
    如果子进程陷入死循环(替换失败) exit(0)执行不了, 一直创建子进程, 父进程继续等待,调用waitpid(), 都在阻塞, 
    不杀他 父进程在waitpid, 子进程在读, 下一次上次的pid又进行waitpid, 新的子进程又去读fgets(), 子子孙孙无穷, 最终会把操作系统资源消耗完





















