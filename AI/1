/*================================================================
*   
*   文件名称：jarvis.hpp
*   创 建 者：Angela
*   创建日期：2020年07月17日
*   描    述：
*
================================================================*/

#ifndef _JARVIS_HPP_
#define _JARVIS_HPP_

#include <stdio.h>
#include <iostream>
#include <sstream>
#include <memory>
#include <string>
#include <map>
#include <unordered_map>
#include <json/json.h>
#include "speech.h" // 引入语音识别
#include "base/http.h"

#define VOICE_PATH "voice"// 语音保存路径
#define SPEECH_ASR "asr.wav"// 定义语音格式
#define SPEECH_TTL "ttl.mp3"
#define CMD_ETC "command.etc"
#define SIZE 1024

using namespace std;

class TuLing{
    private:
        string url = "http://openapi.tuling123.com/openapi/api/v2"; // 往哪推送, 请求最后要被post到哪里, 要使用post方法就必须使用http客户端,
        string apikey = "128dc4fcd3a7461aae292702d91181a2";
        string userId = "1";
        aip::HttpClient client;

    public:
        TuLing(){
        }
        string ResponsePickup(std::string &str){
            JSONCPP_STRING errs; // 如果出错了, 就填上对应的错误信息
            Json::Value root; 
            Json::CharReaderBuilder rb;
            std::unique_ptr<Json::CharReader> const jsonReader(rb.newCharReader());// 构建charReader对象
            bool res = jsonReader->parse(str.data(), str.data()+str.size(), &root, &errs);// 解析
            // 如果res返回值为false或者errs为不为空(则证明有错误原因),则证明解析出错
            if(!res || !errs.empty()){
                cout << "jsoncpp parse error" << endl;
                return errs;// 返回错误原因;
            }
            // 去官方文档看输出模式, 返回的results是json数组, 我们只有results[0], 我们只想要result[0]里面的values内容
            Json::Value results = root["results"];
            Json::Value values = results[0]["values"];// 已经拿到整个文本
            return values["text"].asString(); // test是json串的key值, asString返回所对应的字符串
        } 
        string Chat(string message){
            Json::Value root;
            root["reqType"] = 0;
            Json::Value inputText; // 内部key值
            Json::Value text;// 放内容,内部value
            text["text"] = message;
            inputText["inputText"] = text;

            root["perception"] = inputText;// 外部key

            Json::Value user;
            user["apiKey"] = apikey;
            user["userId"] = userId;

            root["userInfo"] = user;

            Json::StreamWriterBuilder wb;
            std::ostringstream os;

            std::unique_ptr<Json::StreamWriter> jsonwriter(wb.newStreamWriter());
            jsonwriter->write(root, &os);

            //std::string result = os.str();
            //return result;
            string body = os.str(); // 有了json串, 接下来把json串推给图灵机器人(发送HTTP请求), 前面构建的一大堆是为了构建json串, 而json串就是body, 要发出去的json串(我自己说的话)
            
            // http request. 必须从HTTP客户端拿到结果
            string response;// 定义了response, 也就是json串, 是返回来的json串(图灵机器人回的json串)
            int code = client.post(url, nullptr, body, nullptr, &response);// 返回结果到status_code
            if(code != CURLcode::CURLE_OK){
                cout << "http request error" << endl;
                return "";//错误返回空串
            }

            // 对应答json串进行反序列化, 给response再起一个名字,成为内部反序列化的字符串名,分析response
            return  ResponsePickup(response);// 然后需要在TuLing里再写一个提取的方法
            
        }
        ~TuLing(){
        }
};

// 语音识别
class Jarvis{
    private:
        TuLing tl;
        aip::Speech* client;

        string appid = "21474282";
        string apikey = "fDuYP2m9y9LCXQBj1DGAsHvm";
        string secretkey = "qF95Dgoxku0GdUCH1ksDf0GGXldZj9xv";

        string record;// 录音
        string play;
        unordered_map<string, string> record_set;// 如果认识这条命令，就会去执行这条命令；如果不是命令，就正常聊天
    public:
        // 客户端
        Jarvis():client(nullptr){
        }
        // 把配置文件加进来
        void LoadCommandEtc(){
            string name = CMD_ETC;
            // 要操作文件，得先把文件打开，读取成功/读取失败
            ifstream in(name);
            if(!in.is_open()){
                cout << "Load command etc error" << endl;
                exit(1);
            }
            char line[SIZE];
            string sep = ": ";// 把一个字符串通过这个截取
            while(in.getline(line, sizeof(line))){
            // 按行读取内容, 转化为字符串
                string str = line;
                size_t pos = str.find(sep);
                if(pos == string::npos){// npos无限大值, 意思找不到
                    // 如果没有找到
                    cout << "command ect format error" << endl;
                    break;
                }
                string key = str.substr(0, pos);// pos之前的字符就是pos个
                string value = str.substr(pos + sep.size());
                key += "。";
                cout << "debug# " << key << endl;
                cout << "debug# " << value << endl;
                // 把执行命令加进来
                record_set.insert({key,value});
           }
            in.close();
        }
        void Init(){
            client = new aip::Speech(appid, apikey, secretkey);
            cout << "load command etc ... ing" << endl;
            LoadCommandEtc();// 在启动时把我们的配置文件加进来
            cout << "load command etc ... done" << endl;

            // 构建录音的路径
            record = "arecord -t wav -c 1 -r 16000 -d 5 -f S16_LE ";
            record += VOICE_PATH;// 路径 默认会将语音文件保存在当前目录下, 
            record += "/";
            record += SPEECH_ASR;
            record += "> /dev/null 2>&1";

            // 构建播放的路径
            play = "cvlc --play-and-exit";
            play += VOICE_PATH;
            play += "/";
            play += SPEECH_TTL;
            play += ">/dev/null 2>&1";

        }
        // 完成本地录音功能, 需要把录音命令调起来,execl可以完成替换, 但是会把当前的代码全部替换掉, Jarvis也没了; 必须先fork创建子进程, 然后让子进程去录音,父进程等子进程录好音之后, 在把音频上传到百度的语音识别进行语音转文本这个逻辑;
        // popen可以自动完成两个基本功能,可以执行本地命令, 把命令的结果返回到FILE*, 加头文件stdio.h
        bool Exec(string command, bool is_print){// 传入你想让我执行的命令,以及是否要把结果打印出来
            FILE* fp = popen(command.c_str(), "r"); // record是string类型, 而popen的参数是char* 类型, 因此record.c_str()即可获得char* 
            if(nullptr == fp){// 打开失败
                cout << "popen error!" << endl;
                return false;// 返回
            }
            // 读取文件指针fp的内容, 用fread来读
            string result;
            if(is_print){
                char c;// 读到的内容放到c里,
                size_t s = 0;
                while((s = fread(&c, 1, 1, fp)) > 0){// 从fp当中一次读一个字符到c中
                    //result.push_back(c);// 读成功, 就把对应的字符插入到result中
                    // 让他直接打印
                    cout << c;   
                }
                // 要打印的话, 这里打印
                //cout << result << endl;

            }
            pclose(fp);
            return true;
        }

        // 识别
        string RecognizePickup(Json::Value &root){
            // 对反序列化, 语音识别解析
            //JSONCPP_STRING errs;
            //Json::CharReaderBuilder rb;
            //std::unique_ptr<Json::CharReader> const json_reader(rb.newCharReader());
            //bool res = json_reader->parse();
            // 已经是Json::Value了, 直接提取就行, 不需要上面这些, 
            int err_no = root["err_no"].asInt();
            if(err_no != 0){
                cout << root["err_msg"] << " : " << err_no << endl;
                return "unknown";
            }
            return root["result"][0].asString();            
        }
        string ASR(aip::Speech* client){
            string asr_file = VOICE_PATH; //  语音保存路径
            asr_file += "/";
            asr_file += SPEECH_ASR;

            map<string, string> options;
            string file_content;
            aip::get_file_content(asr_file.c_str(), &file_content);// 把识别的内容读取到字符串中

            Json::Value root = client->recognize(file_content, "wav", 16000, options);
            // return root.toStyledString();// 把value对象转换为json串
            // 识别成功后, 该反序列化了
            return RecognizePickup(root);
        }
        //语言合成
        bool TTS(aip::Speech* client, std::string& str){
           ofstream ofile; // 输出文件流
           string ttl = VOICE_PATH;
           ttl += "/";
           ttl += SPEECH_TTL;
           ofile.open(ttl.c_str(), ios::out | ios::binary); // 以二进制输出流的形式打开文件
           string file_ret;// 文件内容
           map<string,string> options;
           
           options["spd"] = 5;
           options["per"] = 2;

           Json::Value result = client->text2audio(str, options, file_ret);// 要合成的内容,选项,以及最后合成的内容
           if(!file_ret.empty()){// 有内容,
               ofile << file_ret;// 把文件的内容输出到文件里
           }
           else{
               cout << result.toStyledString() << endl; // 输出错误信息看看
           }
           ofile.close();// 关闭文件
        }

        bool IsCommand(std::string &message){
            // 检测是否为命令 ， 在unordered_map中查找
            return record_set.find(message) != record_set.end() ? true : false;// 根据key值来查找, 到end就是没找到
        }
        void Run(){
            for(;;){
                cout << "讲话中: "; 
                fflush(stdout);
                if(Exec(record, false)){// 只看最终有没有录好, 不需要返回结果
                   cout << endl;
                   cout << "识别中..." << endl;
                   fflush(stdout);
                   string message = ASR(client);// 识别后的结果
                   cout << endl; // 识别完了
                   if(message == "退出。"){
                        cout << "收到！" << endl;
                        break;
                   }
                   cout << "debug# " << message << endl; // 看一下message翻译的结果
                   // 判定当前的message
                   if(IsCommand(message)){
                        // 是命令，就执行命令,调用Exec执行命令,record_set中保存了所有的执行命令
                        Exec(record_set[message], true);// 执行命令完了,显示结果
                        continue;
                   }
                   else{
                       // 不是命令,那就是聊天, 把我的话交给图灵,
                       cout << "我："<< message << endl;
                       // 把文本信息交给图灵机器人
                       string echo = tl.Chat(message);
                       cout << "Jarvis: " << echo << endl;
                       // 把文本转成音频mp3，语言合成
                       TTS(client, echo);
                       Exec(play, false);
                   }
                 } 
            }
        }
};
#endif
