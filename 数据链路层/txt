1. 网络层的IP协议不负责数据的有效或可靠到达对端
2. 网络层的IP协议只负责数据的源端和目的端, 换句话说, 只负责数据从哪里来到哪里去,
数据链路层:
    1. 负责相邻设备之间的传输,决定传输的因素是MAC地址 (路由器如何将数据给..)
        MAC地址: 6字节的整数, uint8_t addr[6]: MAC地址可以唯一标识一台设备(全球唯一的MAC地址)和网卡设备绑定的, 一个网卡带有一MAC地址
        ip地址会动态进行变化, 
    2. 以太网协议
        目的MAC地址(6字节) + 源MAC地址(6字节) + 类型(2字节) + 数据(来源于网络层) + CRC校验
            类型: 标识网络层使用什么协议
            数据: 有效载荷, 来源于网络层 受MTU的限制
            CRC校验: 检验数据链路层的数据帧是否出差错, 判断以太网数据是否在网络传输中被损坏掉
        arp命令:
            Address      HWtype      HWaddress         Flags Mask           Iface
            ip地址               MAC地址(物理地址)
    3. ARP协议:
        1. 获取相邻设备的MAC地址, 用目的ip(目的主机的IP) ----> 获取对应的MAC地址
        2. ARP是广播发送, 子网当中的所有机器都会受到ARP请求, 分析ARP请求当中的目的IP地址是否是自己机器持有的IP地址, 如果是, 则回复ARP应答, 在应答当中包含自己主机的MAC地址,如果不是,则不处理.
        3. ARP协议只在子网当中有效, 只能获取子网机器的MAC地址, 
        字段名称:
            以太网首部:
                以太网目的地址(目的MAC地址): ARP请求当中 目的MAC地址全部填充为1(48个1), 表示在当前子网当中广播;
                源MAC地址: ARP请求主机的MAC地址, 哪台机器发出来,填充哪台 
                帧类型: 以太网数帧类型, 表示上层在使用什么协议 ---> ARP协议是介于网络层和数据链路层之间的协议
                    抓包时会看到两个结果:
                        0x0800: ip协议
                        0x0806: ARP请求或者应答
            28字节的请求或者应答:
                2字节的硬件地址类型:定义运行ARP网络的类型, 现在一般都是以太网,
                2字节协议类型: 表示使用什么协议, 标识当前是IP地址转换MAC地址, 
                1字节硬件地址长度: 表示MAC地址的长度(物理地址最多6个字节)
                1字节的协议地址长度: 表示IP地址的长度(4字节)
                op(option): 表示当前是ARP请求还是ARP应答, 1表示请求, 2表示应答
                发送端MAC地址: 发送ARP请求主机或者ARP应答主机的MAC地址, 
                发送端IP地址:  发送ARP请求或者ARP应答的ip地址;
                目的以太网地址(MAC地址): 当是ARP请求的时候, 填充0x000000000000; 当是ARP应答, 填充的是ARP想要请求主机的MAC地址
                目的ip地址: 目标主机的IP地址, 
        ARP缓存表:  提高转发的效率
            1. arp命令可以看到本地机器保存的ARP缓存表, 缓存表是隔一段时间(20分钟)进行更新的(将老的清理掉,更新为新的)
            2. 如果数据链路层没有从ARP缓存表中发现相邻设备的MAC地址, 则才发送ARP请求, 否则, 直接从缓存表中获取, 组织数据链路层的以太网数据帧;
        作业:
            模拟一个ARP请求, 抓包之后分析字段含义,
                arping - I ens33 -c 2 [目标主机ip]   目的MAC地址并不是全一,ARP协议只在子网内部进行生效, 不能去抓百度 
                如果我们用的是实体的机器, 看到的结果和上述是一样的 , 但是用的虚拟机 就不大一样
            root用户:
                tcpdump -i any port[] -s -w 123.dat  (看以太网字段)

    其他协议:
        NAT协议:
            1. 地址转换协议, 将私网ip转换为公网ip, 
                打开浏览器 输入ip, 将看到自己机器的ip --->  NAT服务
        请求:
            177.16.99.129(源端口) 14.215.177.39,(百度ip) 80端口 procotol, 但是ping的时候并没有用到端口
            对于请求而言, 替换源IP地址(私网ip)为公网ip 
            117.36.117.208,源端口, 14.215.177.39, 80, procotol
                应答: 14.215.177.39 , 80,  117.36.117.208 目的端口, procotol对于应答而言, 替换的是目的ip地址为私网ip地址
                    144.215.177.39, 80  , 172.16.99.129, 目的端口, procotol
                    互联网主机收到的是公网ip
                    回来的时候 需要将目的(公网)ip地址替换为私网ip地址
            NAT特点:
                1. NAT服务对于通信双方是无感知的,
                2. 网络被划分为私网和公网, NAT网关通常假设在私网搭配公网路由的出口位置, 双方的数据包都需要经过NAT网关
                3. 网络的访问只能从私网一端发起, 公网的机器不能直接访问私网的机器, 公网是无法访问到私网的主机的
                4. NAT网关对于请求而言, 替换源ip地址, 对于应答而言, 替换目的IP地址
                5. NAT网关实现了双向翻译的功能, 所以需要在NAT网关当中维护一张映射表, 把替换的信息一一记录下来
        静态NAT
            在网络转换的时候, 私网ip唯一对应一个公网ip, 一对一的关系, 并没有解决资源枯竭, 
            从遏制IP地址枯竭的问题上面来看, 并没有解决实际问题, 因为还是一对一的关系,还是需要消耗公网ip
            作用: 某些公司想要隐藏自己真实的ip地址时, 就可以使用静态NAT, 别人只能拿到公网NAT

        动态NAT:
            在NAT网关当中, 维护了多个公网ip, 不是给一个私网ip唯一映射一个公网ip, 而是会动态分配, 
            在分配ip地址时, 不是一成不变的, 而是根据公网ip的空闲来进行分配的
                                                   NAT网关(维护了多个公网ip)
            私网ip1                                公网ip1       随便连接 根据空闲 不是固定的             
            私网ip2                                公网ip2
            私网ip3                                公网ip3
            私网ip4                                公网ip4
            动态NAT也没有很好的解决(IP地址)资源枯竭的问题, 
        NAPT(别名: 动态NAT重载)
            静态NAT和动态NAT都是在更改网络层的ip地址, 而NAPT不仅更改网络层的IP地址, 还修改了传输层的端口
            可以通过一个公网ip来应付2(多个)个私网ip想上网的需求, 
            第一个要发送的数据:    私网ip+端口                     公网ip+端口            目的ip+目的端口
                                172.16.99.129:17777            117.36.117.208:10001       14.215.177.39:80(百度服务器)
                                172.16.99.129:18888            117.36.117.208;10002       14.215.177.39:80 回复数据是给公网ip回复
                                172.16.99.154.17777            117.36.117.208:10003       14.215.177.39:80
            端口号的上限是2^16, NAPT理论上, 一个公网ip可以替换2^16个私网ip,(取决于端口(uint16_t整数))
        NAPT总结:
            私网ip地址和公网ip地址变成了多对一的关系, 可以解决ip地址枯竭的问题
            NAPT也是动态NAT, NAT也可以在NAT网关中维护多个公网ip,  维护一个公网ip就可以连接65000多个私网ip
            NAPT很好的解决了ip地址不够用(IP地址枯竭的问题)
            NAPT的好搭档: DHCP协议(动态主机分配协议)
        
        DNS协议:
            1. 域名解析协议: 将域名转化为ip地址, 在浏览器输入域名后, 会通过域名去找他的ip地址, 从而访问
            2. 域名: 其实就是由"."分隔的字符串的集合,分隔出来的字符串表示公司的名称或者性质的字符串  www.baidu.com
                com: 都是商业公司
                cn: 中国的网站
                us: 美国
                gov: 政府
                edu: 教育
                baidu, jingdong , alibaba
            3. 域名解析服务器: (将域名转换为ip地址,) 保存了域名和ip的对应关系 
                www.baidu.com --> 14.215.177.35
                处理的请求是DNS请求, DNS对应的传输层协议是udp, 由于域名解析的量非常庞大, 在使用浏览器的时候或多或少都会牵扯到域名解析, 而tcp的可靠性,需要和服务器建立连接, 会导致域名服务器拖垮, 之间不存在建立连接和释放连接,
            4. 域名服务器是一种层级管理方式, 不同域名被不同的域名服务器所管理
                根域名服务器 -->  授权管理
                顶级域名服务器管理的是一级域名(.com.cn.us....)
                二级域名服务器管理的是二级域名-----> (baidu.com,  taobao.com,  jingdong.com...)
                三级域名服务器管理的是三级域名 (baike.baidu.com..)
            5. 域名解析流程
                1. 浏览器的缓冲当中也会缓存域名和IP地址对应关系
                2. 本地的hosts文件当中也会缓冲域名和ip的对应关系
                3. 本地DNS服务器,可以在这里查询
             5.1 递归查询
                浏览器缓存 --> hosts文件 --> 本地DNS服务器 ---> 根域名服务器 --> 顶级域名服务器 ---> 二级域名服务器  --> 三级域名服务器
                查找到之后再反着告诉前一个服务器,
             5.2 迭代查询
                浏览器缓存 --> hosts文件 --> 本地DNS服务器 --->
                
                根域名服务器 --> 顶级域名服务器 ---> 二级域名服务器  --> 三级域名服务器
                
                本地没有去了根域名 根域名说我没有 让本地去顶级去找, 顶级没有让本地DNS去二级查询, 二级没有告诉本地DNS去三级服务器访问, 三级找到了则直接返回给DNS服务器,然后DNS返回到浏览器缓存 
                
